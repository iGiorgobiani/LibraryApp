@model Model.Book.BookViewModel
@using X.PagedList;
@using X.PagedList.Mvc.Core
@using X.PagedList.Mvc.Core.Fluent
@* @using X.PagedList.Web.Common *@
<link href="~/css/inline-edit.css" rel="stylesheet" />
@{
    ViewData["Title"] = "მთავარი";
}

<div>
    <div>
        <h2 class="heading-box">წიგნები</h2>
    </div>
    @using (Html.BeginForm("Books", "Book", FormMethod.Get))
    {
        <div class="d-flex">
            <div class="col-md-2">
                @Html.LabelFor(x => x.Name, "წიგნის სახელი")
                @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
            </div>
            <div class="col-md-2 filters">
                @Html.LabelFor(x => x.Firstname, "ავტორის სახელი")
                @Html.TextBoxFor(x => x.Firstname, new { @class = "form-control" })
            </div>
            <div class="col-md-2 filters">
                @Html.LabelFor(x => x.Lastname, "ავტორის გვარი")
                @Html.TextBoxFor(x => x.Lastname, new { @class = "form-control" })
            </div>
            <div class="col-md-2 filters filterBtn">
                <input type="submit" class="btn btn-primary" value="ძიება" />
            </div>
        </div>
    }
    <br>
    @if (User.IsInRole("Admin"))
    {
        <div>
            <a type="button" class="btn btn-primary" href="@Url.Action("AddBook", "Home")">ახალი წიგნის დამატება</a>
    </div>
    }
    <br>
    <table class="table table-hover" id="editableTable">
        <thead>
            <tr>
@*                 <th>სურათი</th> *@
                <th style="display: none">Id</th>
                <th>სახელი</th>
                <th>გამოქვეყნების წელი</th>
                <th>ჟანრი</th>
                <th>ავტორები</th>
                @if (User.IsInRole("Admin"))
                    {
                        <th></th> 
                    }
                @if (User.IsInRole("Editor"))
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var book in Model.Books)
            {
                <tr>
@*                     <td>
                        
                </td> *@
                    <td style="display: none">@book.BookId</td>
                    <td onclick="makeEditable(this)" class="col-md-4" data-bookid="@book.BookId" data-currentName="@book.Name">@book.Name</td>
                    <td>@book.Year</td>
                    <td>
                        @foreach (var genre in book.Genres)
                        {
                            <span>
                                @genre.Name 
                                @if (genre != book.Genres.LastOrDefault())
                                {
                                    <text>,</text>
                                }
                            </span>
                        }

                    </td>
                    <td>
                        @foreach (var author in book.Authors)
                        {
                            <span>
                                @author.Firstname @author.Lastname
                                @if (author != book.Authors.LastOrDefault())
                                {
                                    <text>,</text>
                                }
                            </span>
                        }
                    </td>
                    @if (User.IsInRole("Admin"))
                    {
                    <td>
                        <a class="btn btn-primary" href="@Url.Action("EditBook", "Home", new { bookId = book.BookId} )">რედაქტირება</a>
                        <!-- Button trigger modal -->
                        <button type="button" class="btn btn-danger" data-bookid="@book.BookId" onclick="tryRemoveBook(this)">
                            წაშლა
                        </button>
                    </td>
                    }
                    @if (User.IsInRole("Editor"))
                    {
                        <td>
                            <a class="btn btn-primary" href="@Url.Action("EditBook", "Home", new { bookId = book.BookId} )">რედაქტირება</a>
                           @*  <!-- Button trigger modal -->
                            <button type="button" class="btn btn-danger" data-bookid="@book.BookId" onclick="tryRemoveBook(this)">
                                წაშლა
                            </button> *@
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex" style="justify-content: space-between;">
        <div class="registry-paging jacob">
            @Html.PagedListPager(Model.Books, page => Url.Action("Index", new { Model.Name, Model.Lastname, page }), new PagedListRenderOptions { LiElementClasses = new string[] { "page-item" }, PageClasses = new string[] { "page-link" }, ActiveLiElementClass = "active-link-cl" })
        </div>
        <div style="margin-top: 50px; margin-right: 35px;">
            <h5>სულ : @Model.Total</h5>
        </div>
    </div>

</div>



<!-- data-bs-toggle="modal" data-bs-target="#deleteModal -->
<!-- Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">წიგნის წაშლა</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                გსურთ წიგნის წაშლა?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">არა</button>
                <button type="button" class="btn btn-primary" onclick="removeBook()" id="removeBook">დიახ</button>
            </div>
        </div>
    </div>
</div>

<script>

    let removeBookId = 0;
    let currentUrl = window.location.href;

    let tryRemoveBook = (element) => {
        removeBookId = element.dataset.bookid;
        let deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'), {
            keyboard: false
        })
        deleteModal.show();
    };
    let removeBook = () => {
        if (removeBookId == 0) {
            alert("Can't remove item");
            return;
        }

        let newUrl = '@Url.Action("RemoveBook", "Home")' + '?bookId=' + removeBookId + '&returnUrl=' + encodeURIComponent(currentUrl);
        window.location.href = newUrl;
    }
    
    let updateBookId = 0;

    makeEditable = (cell) => {

        if (cell.dataset.bookid != updateBookId) {
            updateBookId = cell.dataset.bookid;
            const currentText = cell.innerText;
            cell.innerHTML = `<input class="form-control editable"  maxlength="100" type="text" value="${currentText}" onblur="saveEdit(this)">`;
            const input = cell.querySelector('.editable');
            input.style.display = 'block';
            input.focus();
            input.select();
        }
    }

    saveEdit = (input) => {
        updateBookId = 0;
        const cell = input.parentElement;
        const newText = input.value;
        cell.innerHTML = newText;
        if (cell.dataset.currentname != newText) {
            $.ajax({
                url: '@Url.Action("UpdateName", "Home")',
                type: 'POST',
                data: {
                    bookid: cell.dataset.bookid,
                    name: newText
                },
                success: function (response) {
                    if (response.value) {
                        cell.dataset.currentname = newText,
                        alertify.success(response.msg)
                    }
                    else
                        alertify.error(response.msg)
                }
            });
        }


    }
</script>